---
alwaysApply: false
---

# ドキュメント運用規則

## 概要

本プロジェクトにおけるドキュメント管理の体系的運用を定義する。
すべてのドキュメントは `.docs` ディレクトリ配下に配置し、以下の4つのカテゴリに分類して管理する。

## ドキュメント分類

### 1. 要件定義書 (Requirements)
- **配置場所**: `.docs/requirements/`
- **目的**: 機能要件、技術要件、制約事項の定義
- **構造**: 機能単位でディレクトリを作成し、各種仕様書を配置

#### ディレクトリ構造例
```
.docs/requirements/
├── user-authentication/
│   ├── functional-requirements.md
│   ├── technical-requirements.md
│   └── acceptance-criteria.md
├── note-management/
│   ├── functional-requirements.md
│   ├── data-model.md
│   └── api-specifications.md
└── deck-system/
    ├── functional-requirements.md
    └── user-stories.md
```

#### 必須含有項目
- 機能概要
- ユーザーストーリー
- 受け入れ基準
- 技術制約
- 依存関係
- 非機能要件

### 2. 実装計画書 (Plans)
- **配置場所**: `.docs/plans/`
- **目的**: 要件定義に基づく具体的な実装戦略の策定
- **構造**: 要件定義書と対応する形でディレクトリを作成

#### ディレクトリ構造例
```
.docs/plans/
├── user-authentication/
│   ├── architecture-design.md
│   ├── component-structure.md
│   └── implementation-timeline.md
├── note-management/
│   ├── database-schema.md
│   ├── api-endpoints.md
│   └── frontend-components.md
└── deck-system/
    ├── state-management.md
    └── ui-components.md
```

#### 必須含有項目
- アーキテクチャ設計
- コンポーネント構造
- ディレクトリ構成
- 技術選定根拠
- 既存実装との関係性
- 実装順序と依存関係
- リスク分析と対策

### 3. 作業ログ (Work Logs)
- **配置場所**: `.docs/work-logs/`
- **目的**: 実装作業の詳細記録と進捗管理
- **構造**: 年月/日付/作業名の階層構造

#### ディレクトリ構造例
```
.docs/work-logs/
├── 2025_01/
│   ├── 2025_01_15/
│   │   ├── implement-user-auth-middleware.md
│   │   └── fix-supabase-client-types.md
│   └── 2025_01_16/
│       └── create-note-crud-components.md
└── 2025_02/
    └── 2025_02_01/
        └── optimize-database-queries.md
```

#### 必須記録項目
- **作業概要**: 何を実装/修正したか
- **対象ファイル**: 具体的なファイルパスと行番号
- **変更内容**: Before/Afterの具体的な差分
- **技術的判断**: なぜその実装方法を選択したか
- **課題と解決策**: 発生した問題とその対処法
- **テスト結果**: 動作確認の結果
- **関連リンク**: 参考にした資料やPR番号

#### 作業ログテンプレート
```markdown
# [作業名]

## 作業概要
[実装した機能や修正した内容の概要]

## 対象ファイル
- `app/components/example.tsx` (L15-L30)
- `lib/utils/helper.ts` (L45-L60)

## 変更内容
### Before
```typescript
[変更前のコード]
```

### After
```typescript
[変更後のコード]
```

## 技術的判断
[なぜこの実装方法を選択したかの根拠]

## 課題と解決策
[発生した問題とその解決方法]

## テスト結果
[動作確認の結果]

## 関連資料
- [参考にしたドキュメントやリンク]
```

### 4. 規則 (Rules)
- **配置場所**: `.docs/rules/`
- **目的**: 開発過程で発見された重要な規則やベストプラクティスの記録
- **構造**: カテゴリ別にファイルを分類

#### ディレクトリ構造例
```
.docs/rules/
├── coding-standards.md
├── database-design-rules.md
├── component-architecture.md
├── error-handling-patterns.md
└── performance-optimization.md
```

## 運用ルール

### 作業ログの作成タイミング
1. **1つのタスク完了時**: 必ず作業ログを作成する
2. **コミット前**: 変更内容を作業ログに記録してからコミットする
3. **バグ修正時**: 原因と解決策を詳細に記録する
4. **リファクタリング時**: 変更理由と影響範囲を明記する

### ドキュメント更新の責任
- **要件定義書**: 機能追加・変更時に必須更新
- **実装計画書**: アーキテクチャ変更時に必須更新
- **作業ログ**: 全ての実装作業で必須作成
- **規則**: 新しいパターンや問題発見時に追記

### 品質管理
1. **相互レビュー**: 重要なドキュメントは必ずレビューを実施
2. **定期更新**: 月1回、ドキュメントの整合性を確認
3. **バージョン管理**: 重要な変更はGitで履歴管理
4. **検索性**: 適切なタグ付けとファイル命名規則の遵守

## ファイル命名規則

### 共通ルール
- 小文字とハイフンを使用 (`kebab-case`)
- 日本語は使用しない
- 意味が明確で検索しやすい名前を付ける

### 例
- ✅ `user-authentication-requirements.md`
- ✅ `implement-note-crud-api.md`
- ❌ `ユーザー認証.md`
- ❌ `fix.md`

## 注意事項

### セキュリティ
- 機密情報（API キー、パスワード等）は記載しない
- 本番環境の詳細情報は別途管理

### 保守性
- 定期的にリンク切れやファイル整理を実施
- 不要になったドキュメントは適切にアーカイブ

### アクセシビリティ
- マークダウン記法を統一
- 適切な見出し構造を使用
- コードブロックには言語指定を追加

---

**最終更新**: 2025年1月
**作成者**: Development Team
**承認者**: Project Lead

