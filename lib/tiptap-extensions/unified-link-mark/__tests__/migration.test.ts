/**
 * migration.test.ts
 * Tests for legacy PageLinkMark to UnifiedLinkMark data migration
 */

import { Editor } from "@tiptap/core";
import StarterKit from "@tiptap/starter-kit";
import { afterEach, beforeEach, describe, expect, it } from "vitest";
import { setupJSDOMEnvironment } from "@/lib/__tests__/helpers";
import { UnifiedLinkMark } from "../index";

// Setup jsdom environment for this test
setupJSDOMEnvironment();

describe("UnifiedLinkMark - Legacy Data Migration", () => {
	let editor: Editor;

	beforeEach(() => {
		editor = new Editor({
			extensions: [StarterKit, UnifiedLinkMark],
		});
	});

	afterEach(() => {
		editor?.destroy();
	});

	describe("PageLinkMark Migration", () => {
		it("should migrate data-page-id links to UnifiedLinkMark", () => {
			const html =
				'<p><a data-page-id="abc-123" data-state="exists" href="/pages/abc-123">Test Link</a></p>';

			editor.commands.setContent(html);
			const json = editor.getJSON();

			// Mark should be recognized as unilink
			const mark = json.content?.[0]?.content?.[0]?.marks?.[0];
			expect(mark?.type).toBe("unilink");
			expect(mark?.attrs.variant).toBe("bracket");
			expect(mark?.attrs.pageId).toBe("abc-123");
			expect(mark?.attrs.state).toBe("exists");
		});

		it("should migrate data-page-title links (missing pages)", () => {
			const html =
				'<p><a data-page-title="New Page" data-state="missing">New Page</a></p>';

			editor.commands.setContent(html);
			const json = editor.getJSON();

			const mark = json.content?.[0]?.content?.[0]?.marks?.[0];
			expect(mark?.type).toBe("unilink");
			expect(mark?.attrs.variant).toBe("bracket");
			expect(mark?.attrs.raw).toBe("New Page"); // raw comes from data-page-title
			expect(mark?.attrs.state).toBe("missing");
			expect(mark?.attrs.exists).toBe(false);
		});

		it("should preserve href attribute during migration", () => {
			const html =
				'<p><a data-page-id="xyz" href="/pages/xyz" data-state="exists">Link</a></p>';

			editor.commands.setContent(html);
			const mark = editor.getJSON().content?.[0]?.content?.[0]?.marks?.[0];

			expect(mark?.attrs.href).toBe("/pages/xyz");
		});

		it("should not migrate links with data-variant (already migrated)", () => {
			const html =
				'<p><a data-variant="bracket" data-page-id="abc">Already Migrated</a></p>';

			editor.commands.setContent(html);
			const mark = editor.getJSON().content?.[0]?.content?.[0]?.marks?.[0];

			// data-variant がある場合は通常のパースロジック
			expect(mark?.type).toBe("unilink");
			expect(mark?.attrs.variant).toBe("bracket");
		});

		it("should generate unique markId for migrated links", () => {
			const html1 = '<p><a data-page-id="abc-1">Link 1</a></p>';
			const html2 = '<p><a data-page-id="abc-2">Link 2</a></p>';

			editor.commands.setContent(`${html1}${html2}`);
			const json = editor.getJSON();

			const mark1 = json.content?.[0]?.content?.[0]?.marks?.[0];
			const mark2 = json.content?.[1]?.content?.[0]?.marks?.[0];

			// markId will be generated by the mark when needed
			// Migration just ensures the mark is recognized
			expect(mark1?.type).toBe("unilink");
			expect(mark2?.type).toBe("unilink");
		});

		it("should migrate data-exists attribute", () => {
			const html =
				'<p><a data-page-id="abc" data-exists="true" data-state="exists">Link</a></p>';

			editor.commands.setContent(html);
			const mark = editor.getJSON().content?.[0]?.content?.[0]?.marks?.[0];

			expect(mark?.attrs.exists).toBe(true);
		});

		it("should handle data-exists=false correctly", () => {
			const html =
				'<p><a data-page-id="abc" data-exists="false" data-state="missing">Link</a></p>';

			editor.commands.setContent(html);
			const mark = editor.getJSON().content?.[0]?.content?.[0]?.marks?.[0];

			expect(mark?.attrs.exists).toBe(false);
		});
	});

	describe("Edge Cases", () => {
		it("should handle links without state attribute", () => {
			const html = '<p><a data-page-id="abc">No State</a></p>';

			editor.commands.setContent(html);
			const mark = editor.getJSON().content?.[0]?.content?.[0]?.marks?.[0];

			expect(mark?.attrs.state).toBe("pending"); // Default value
		});

		it("should handle links without exists attribute", () => {
			const html =
				'<p><a data-page-id="abc" data-state="exists">No Exists</a></p>';

			editor.commands.setContent(html);
			const mark = editor.getJSON().content?.[0]?.content?.[0]?.marks?.[0];

			expect(mark?.attrs.exists).toBe(false); // data-exists がなければ false
		});

		it("should skip external links (not yet supported)", () => {
			const html =
				'<p><a data-page-id="abc" data-external="true" href="https://example.com">External</a></p>';

			editor.commands.setContent(html);
			const json = editor.getJSON();

			// External links are not converted (future support)
			const marks = json.content?.[0]?.content?.[0]?.marks || [];
			const unilinkMark = marks.find((m) => m.type === "unilink");
			expect(unilinkMark).toBeUndefined();
		});

		it("should handle empty text content", () => {
			const html = '<p><a data-page-id="abc">Test</a></p>';

			editor.commands.setContent(html);
			const json = editor.getJSON();

			// Empty content results in no text node
			expect(json.content?.[0]?.content).toBeDefined();
		});

		it("should handle links with only data-page-title", () => {
			const html = '<p><a data-page-title="Only Title">Only Title</a></p>';

			editor.commands.setContent(html);
			const mark = editor.getJSON().content?.[0]?.content?.[0]?.marks?.[0];

			expect(mark?.type).toBe("unilink");
			expect(mark?.attrs.raw).toBe("Only Title");
			expect(mark?.attrs.pageId).toBeNull();
		});

		it("should set href to # for missing page links", () => {
			const html = '<p><a data-page-title="Missing">Missing</a></p>';

			editor.commands.setContent(html);
			const mark = editor.getJSON().content?.[0]?.content?.[0]?.marks?.[0];

			expect(mark?.attrs.href).toBe("#");
		});
	});

	describe("Conversion Consistency", () => {
		it("should convert text content to raw and text attributes", () => {
			const html = '<p><a data-page-id="abc">Display Text</a></p>';

			editor.commands.setContent(html);
			const mark = editor.getJSON().content?.[0]?.content?.[0]?.marks?.[0];
			const textNode = editor.getJSON().content?.[0]?.content?.[0];

			// Text content is stored in the text node, not mark attributes
			expect(textNode?.text).toBe("Display Text");
			expect(mark?.attrs.raw).toBe("Display Text");
		});

		it("should set variant to bracket for all migrated links", () => {
			const html1 = '<p><a data-page-id="abc">Link 1</a></p>';
			const html2 = '<p><a data-page-title="Link 2">Link 2</a></p>';

			editor.commands.setContent(`${html1}${html2}`);
			const json = editor.getJSON();

			const mark1 = json.content?.[0]?.content?.[0]?.marks?.[0];
			const mark2 = json.content?.[1]?.content?.[0]?.marks?.[0];

			expect(mark1?.attrs.variant).toBe("bracket");
			expect(mark2?.attrs.variant).toBe("bracket");
		});

		it("should set created to false for migrated links", () => {
			const html = '<p><a data-page-id="abc">Link</a></p>';

			editor.commands.setContent(html);
			const mark = editor.getJSON().content?.[0]?.content?.[0]?.marks?.[0];

			expect(mark?.attrs.created).toBe(false);
		});

		it("should set key to empty string for data-page-id links", () => {
			const html = '<p><a data-page-id="abc">Link</a></p>';

			editor.commands.setContent(html);
			const mark = editor.getJSON().content?.[0]?.content?.[0]?.marks?.[0];

			expect(mark?.attrs.key).toBe("");
		});

		it("should set key to lowercase title for data-page-title links", () => {
			const html = '<p><a data-page-title="New Page">New Page</a></p>';

			editor.commands.setContent(html);
			const mark = editor.getJSON().content?.[0]?.content?.[0]?.marks?.[0];

			// key is set from the pageTitle attribute value
			expect(mark?.attrs.key).toBe("new page");
		});
	});
});
